name: Generate and upload bindgen output

on:
  push:
    branches: [main]
    paths:
      - "**/*.rs"
      - "**/*.nix"
      - "**/*.h"
      - "Cargo.toml"
      - "Cargo.lock"
  workflow_dispatch:

jobs:
  build-python-headers:
    name: Build Stackless Python Headers
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: cachix/install-nix-action@v26

      - name: Setup Attic cache
        uses: ryanccn/attic-action@v0
        with:
          endpoint: ${{ secrets.ATTIC_ENDPOINT }}
          cache: ${{ secrets.ATTIC_CACHE }}
          token: ${{ secrets.ATTIC_TOKEN }}

      - name: Build pythonHeaders
        run: nix build .#pythonHeaders --print-out-paths --out-link result-python-headers

      - name: Upload pythonHeaders artifact
        uses: actions/upload-artifact@v4
        with:
          name: pythonHeaders
          path: result-python-headers

  generate-bindings:
    name: Generate Bindgen Output
    runs-on: windows-latest
    needs: build-python-headers
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download pythonHeaders artifact
        uses: actions/download-artifact@v4
        with:
          name: pythonHeaders
          path: pythonHeaders

      - name: Set up Python header env vars
        run: |
          echo "PYTHON_HEADER_PATH=${{ github.workspace }}\pythonHeaders\include\python2.7" >> $env:GITHUB_ENV
          echo "BINDGEN_OUTPUT_PATH=${{ github.workspace }}\bindings\bindings.rs" >> $env:GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu

      - uses: Swatinem/rust-cache@v2

      - name: Run cargo build to trigger bindgen
        run: |
          mkdir -p bindings
          cargo build

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION="v$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists and create if new
        uses: mathieudutour/github-tag-action@v6.2
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.get_version.outputs.version }}
          tag_prefix: ""

      - name: Create GitHub Release
        if: steps.tag_version.outputs.new_tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            bindings/bindings.rs
